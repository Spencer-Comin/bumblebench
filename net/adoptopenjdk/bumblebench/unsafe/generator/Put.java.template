/*******************************************************************************
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

package net.adoptopenjdk.bumblebench.unsafe;

import net.adoptopenjdk.bumblebench.core.MicroBench;
import net.adoptopenjdk.bumblebench.unsafe.UnsafeTestData;
import jdk.internal.misc.Unsafe;

public class #name# {
    static final Unsafe UNSAFE = UnsafeTestData.UNSAFE;
    static final UnsafeTestData.Offsets offsets = UnsafeTestData.#ltype#Offsets;
    static final #Type# val = #init#;

    public static class StaticBench extends MicroBench {
        static final Object base = offsets.staticFieldBase;
        static final long offset = offsets.staticFieldOffset;
        protected long doBatch(long numIterations) {
            long i;
            for (i = 0; i < numIterations; i++)
                UNSAFE.put#type##mode#(base, offset, val);
            return i;
        }
    }

    public static class FieldBench extends MicroBench {
        static final Object base = new UnsafeTestData.TestObject();
        static final long offset = offsets.fieldOffset;
        protected long doBatch(long numIterations) {
            long i;
            for (i = 0; i < numIterations; i++)
                UNSAFE.put#type##mode#(base, offset, val);
            return i;
        }
    }

    public static class ArrayBench extends MicroBench {
        static final #Type# array[] = new #Type#[256];
        static final int shift = offsets.arrayShift;
        static final int offset = offsets.arrayOffset;
        protected long doBatch(long numIterations) {
            long i;
            for (i = 0; i < numIterations; i++)
                UNSAFE.put#type##mode#(array, ((i % 256) << shift) + offset, val);
            return i;
        }
    }
}
