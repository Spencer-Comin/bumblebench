/*******************************************************************************
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

package net.adoptopenjdk.bumblebench.unsafe;

import net.adoptopenjdk.bumblebench.core.MicroBench;
import jdk.internal.misc.Unsafe;

public class #name# extends MicroBench {
    static final Unsafe UNSAFE = UnsafeTestData.UNSAFE;

    private static long boolToLong(boolean b) { return b ? 1 : 0; }

    #Type# array[] = new #Type#[512];
    public long dump;

    static final int shift;
    static final int offset;

    static {
        offset = UNSAFE.arrayBaseOffset(#Type#[].class);
        int ascale = UNSAFE.arrayIndexScale(#Type#[].class);
        shift = 31 - Integer.numberOfLeadingZeros(ascale);
    }

    protected long doBatch(long numIterations) {
        long i;
        long acc = 0;

        // cache everything before the loop so there aren't any extra loads in the loop
        Object b = array;
        int o = offset;
        int s = shift;
        Unsafe u = UNSAFE;

        for (i = 0; i < numIterations; i++) {
            #Type# val = u.get#type##mode#(b, ((i % 512) << s) + o);
            // do something simple with the loaded value so the load doesn't get killed by DCE
            acc |= #asLong#(val);
        }

        dump = acc;
        return i;
    }
}
