/*******************************************************************************
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

package net.adoptopenjdk.bumblebench.unsafe;

import net.adoptopenjdk.bumblebench.core.MicroBench;
import net.adoptopenjdk.bumblebench.unsafe.UnsafeTestData;
import jdk.internal.misc.Unsafe;

public class #name# {
    static final Unsafe UNSAFE = UnsafeTestData.UNSAFE;
    static final UnsafeTestData.Offsets offsets = UnsafeTestData.#ltype#Offsets;

    static abstract class AbstractBench extends MicroBench {
        private final Object base0;
        private final Object base1;
        private final long offset0;
        private final long offset1;
        public long dump;

        protected AbstractBench(Object b0, Object b1, long o0, long o1) {
            base0 = b0;
            base1 = b1;
            offset0 = o0;
            offset1 = o1;
        }

        private long boolToLong(boolean b) { return b ? 1 : 0; }

        protected long doBatch(long numIterations) {
            Object base, cacheBase0=base0, cacheBase1=base1;
            long offset, cacheOffset0=offset0, cacheOffset1=offset1;
            #Type# val;
            long acc = 42;
            long i;
            for (i = 0; i < numIterations; i++) {
                acc ^= acc << 23;
                base = ((acc&1) == 0) ? cacheBase0 : cacheBase1;
                offset = ((acc&2) == 0) ? cacheOffset0 : cacheOffset1;

                val = UNSAFE.get#type##mode#(base, offset);
                acc |= #asLong#(val);
            }
            dump = acc;
            return i;
        }
    }

    public static class StaticBench extends AbstractBench {
        public StaticBench() {
            super(offsets.staticFieldBase0, offsets.staticFieldBase1, offsets.staticFieldOffset0, offsets.staticFieldOffset1);
        }
    }

    public static class FieldBench extends AbstractBench {
        public FieldBench() {
            super(new UnsafeTestData.TestObject(), new UnsafeTestData.TestObject(), offsets.fieldOffset0, offsets.fieldOffset1);
        }
    }

    public static class ArrayBench extends MicroBench {
        #Type# array[] = new #Type#[256];
        static final int shift = offsets.arrayShift;
        static final int offset = offsets.arrayOffset;
        protected long doBatch(long numIterations) {
            long i;
            for (i = 0; i < numIterations; i++)
                array[(int) i % 256] = UNSAFE.get#type##mode#(array, ((i % 256) << shift) + offset);
            return i;
        }
    }
}
