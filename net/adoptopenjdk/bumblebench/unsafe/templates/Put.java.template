/*******************************************************************************
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

#define NAME__(tm) Put ## tm ## Bench
#define NAME_(tm) NAME__(tm)
#define NAME NAME_(TYPEMODE)

#define OP__(tm) put ## tm
#define OP_(tm) OP__(tm)
#define OP OP_(TYPEMODE)

package net.adoptopenjdk.bumblebench.unsafe;

import net.adoptopenjdk.bumblebench.core.MicroBench;
import jdk.internal.misc.Unsafe;
import java.lang.reflect.Field;
import java.lang.reflect.InaccessibleObjectException;

public class NAME extends MicroBench {
    static final Unsafe UNSAFE;
    static final int shift;
    static final int offset;

    static {
        try {
            Field f = Unsafe.class.getDeclaredField("theUnsafe");
            f.setAccessible(true);
            UNSAFE = (Unsafe) f.get(null);
        } catch (IllegalAccessError e) {
            System.err.println("add \"--add-exports java.base/jdk.internal.misc=ALL-UNNAMED\" to your java command");
            throw new RuntimeException("Unable to get Unsafe instance.", e);
        } catch (InaccessibleObjectException e) {
            System.err.println("add \"--add-opens java.base/jdk.internal.misc=ALL-UNNAMED\" to your java command");
            throw new RuntimeException("Unable to get Unsafe instance.", e);
        } catch (Exception e) {
            throw new RuntimeException("Unable to get Unsafe instance.", e);
        }

        offset = UNSAFE.arrayBaseOffset(TYPE[].class);
        int ascale = UNSAFE.arrayIndexScale(TYPE[].class);
        shift = 31 - Integer.numberOfLeadingZeros(ascale);
    }

    protected long doBatch(long numIterations) {
        numIterations = Math.min(numIterations, Integer.MAX_VALUE);
        TYPE array[] = new TYPE[(int)numIterations];
        TYPE val = INIT;

        // cache everything before the loop so there aren't any loads in the loop
        int o = offset;
        int s = shift;
        Unsafe u = UNSAFE;

        long i;
        for (i = 0; i < numIterations; i++)
            u.OP(array, (i << s) + o, val);

        return i;
    }
}
