<?xml version="1.0"?>

<!--
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
	    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
This is a build.xml which executes the main openjdk.build build.xml
to allow tools which invoke a root level build.xml file to
execute a build.
-->

<project name="net.adoptopenjdk.bumblebench" default="dist" basedir=".">
	<!--taskdef resource='net/sf/antcontrib/antlib.xml'/-->
	<description>
       Compile net.adoptopenjdk.bumblebench
    </description>

	<property name="dist" value="${basedir}"/>
	<property name="src-core" value="${basedir}/net/adoptopenjdk/bumblebench/core"/>
	<property name="src-collections" value="${basedir}/net/adoptopenjdk/bumblebench/collections"/>
	<property name="src-crypto" value="${basedir}/net/adoptopenjdk/bumblebench/crypto"/>
	<property name="src-examples" value="${basedir}/net/adoptopenjdk/bumblebench/examples"/>
	<property name="src-gpu" value="${basedir}/net/adoptopenjdk/bumblebench/gpu"/>
	<property name="src-humble" value="${basedir}/net/adoptopenjdk/bumblebench/humble"/>
	<property name="src-json" value="${basedir}/net/adoptopenjdk/bumblebench/json"/>
	<property name="src-indy" value="${basedir}/net/adoptopenjdk/bumblebench/indy"/>
	<property name="src-lambda" value="${basedir}/net/adoptopenjdk/bumblebench/lambda"/>
	<property name="src-math" value="${basedir}/net/adoptopenjdk/bumblebench/math"/>
 	<property name="src-string" value="${basedir}/net/adoptopenjdk/bumblebench/string"/>
	<property name="src-jni" value="${basedir}/net/adoptopenjdk/bumblebench/jni"/>
	<property name="src-arraycopy" value="${basedir}/net/adoptopenjdk/bumblebench/arraycopy"/>
    <property name="src-unsafe" value="${basedir}/net/adoptopenjdk/bumblebench/unsafe"/>
    <property name="src-unsafe-generator" value="${src-unsafe}/generator"/>


    <target name="unsafe-benchmark-generator" description="taskdef the unsafe benchmark generator">
        <javac srcdir="${src-unsafe-generator}"
            debug="on"
            destdir=""
            source="21"
            target="21"
            includeantruntime="true">
        </javac>
        <taskdef name="unsafegenerate" classname="BenchGenerator" classpath="${basedir}"/>
    </target>

    <target name="unsafe-benchmarks" depends="unsafe-benchmark-generator">
        <unsafegenerate prefix="Put" template="${src-unsafe-generator}/Put.java.template" outputdir="${src-unsafe}">
            <!-- plain puts -->
            <blueprint type="Object" inlinetype="Reference" init="new Object()"/>
            <blueprint type="int" inlinetype="Int" init="17"/>
            <blueprint type="boolean" inlinetype="Boolean" init="true"/>
            <blueprint type="byte" inlinetype="Byte" init="0x12"/>
            <blueprint type="short" inlinetype="Short" init="17"/>
            <blueprint type="char" inlinetype="Char" init="'a'"/>
            <blueprint type="long" inlinetype="Long" init="17l"/>
            <blueprint type="float" inlinetype="Float" init="1.0f"/>
            <blueprint type="double" inlinetype="Double" init="1.0d"/>

            <!-- volatile puts -->
            <blueprint type="Object" inlinetype="Reference" mode="Volatile" init="new Object()"/>
            <blueprint type="int" inlinetype="Int" mode="Volatile" init="17"/>
            <blueprint type="boolean" inlinetype="Boolean" mode="Volatile" init="true"/>
            <blueprint type="byte" inlinetype="Byte" mode="Volatile" init="0x12"/>
            <blueprint type="short" inlinetype="Short" mode="Volatile" init="17"/>
            <blueprint type="char" inlinetype="Char" mode="Volatile" init="'a'"/>
            <blueprint type="long" inlinetype="Long" mode="Volatile" init="17l"/>
            <blueprint type="float" inlinetype="Float" mode="Volatile" init="1.0f"/>
            <blueprint type="double" inlinetype="Double" mode="Volatile" init="1.0d"/>

            <!-- release puts -->
            <blueprint type="Object" inlinetype="Reference" mode="Release" init="new Object()"/>
            <blueprint type="int" inlinetype="Int" mode="Release" init="17"/>
            <blueprint type="boolean" inlinetype="Boolean" mode="Release" init="true"/>
            <blueprint type="byte" inlinetype="Byte" mode="Release" init="0x12"/>
            <blueprint type="short" inlinetype="Short" mode="Release" init="17"/>
            <blueprint type="char" inlinetype="Char" mode="Release" init="'a'"/>
            <blueprint type="long" inlinetype="Long" mode="Release" init="17l"/>
            <blueprint type="float" inlinetype="Float" mode="Release" init="1.0f"/>
            <blueprint type="double" inlinetype="Double" mode="Release" init="1.0d"/>

            <!-- opaque puts -->
            <blueprint type="Object" inlinetype="Reference" mode="Opaque" init="new Object()"/>
            <blueprint type="int" inlinetype="Int" mode="Opaque" init="17"/>
            <blueprint type="boolean" inlinetype="Boolean" mode="Opaque" init="true"/>
            <blueprint type="byte" inlinetype="Byte" mode="Opaque" init="0x12"/>
            <blueprint type="short" inlinetype="Short" mode="Opaque" init="17"/>
            <blueprint type="char" inlinetype="Char" mode="Opaque" init="'a'"/>
            <blueprint type="long" inlinetype="Long" mode="Opaque" init="17l"/>
            <blueprint type="float" inlinetype="Float" mode="Opaque" init="1.0f"/>
            <blueprint type="double" inlinetype="Double" mode="Opaque" init="1.0d"/>
        </unsafegenerate>
        <unsafegenerate prefix="Get" template="${src-unsafe-generator}/Get.java.template" outputdir="${src-unsafe}">
            <!-- plain gets -->
            <blueprint type="Object" inlinetype="Reference" asLong="System.identityHashCode"/>
            <blueprint type="int" inlinetype="Int"/>
            <blueprint type="boolean" inlinetype="Boolean" asLong="boolToLong"/>
            <blueprint type="byte" inlinetype="Byte"/>
            <blueprint type="short" inlinetype="Short"/>
            <blueprint type="char" inlinetype="Char"/>
            <blueprint type="long" inlinetype="Long"/>
            <blueprint type="float" inlinetype="Float" asLong="Float.floatToRawIntBits"/>
            <blueprint type="double" inlinetype="Double" asLong="Double.doubleToRawLongBits"/>

            <!-- volatile gets -->
            <blueprint type="Object" inlinetype="Reference" mode="Volatile" asLong="System.identityHashCode"/>
            <blueprint type="int" inlinetype="Int" mode="Volatile"/>
            <blueprint type="boolean" inlinetype="Boolean" mode="Volatile" asLong="boolToLong"/>
            <blueprint type="byte" inlinetype="Byte" mode="Volatile"/>
            <blueprint type="short" inlinetype="Short" mode="Volatile"/>
            <blueprint type="char" inlinetype="Char" mode="Volatile"/>
            <blueprint type="long" inlinetype="Long" mode="Volatile"/>
            <blueprint type="float" inlinetype="Float" mode="Volatile" asLong="Float.floatToRawIntBits"/>
            <blueprint type="double" inlinetype="Double" mode="Volatile" asLong="Double.doubleToRawLongBits"/>

            <!-- acquire gets -->
            <blueprint type="Object" inlinetype="Reference" mode="Acquire" asLong="System.identityHashCode"/>
            <blueprint type="int" inlinetype="Int" mode="Acquire"/>
            <blueprint type="boolean" inlinetype="Boolean" mode="Acquire" asLong="boolToLong"/>
            <blueprint type="byte" inlinetype="Byte" mode="Acquire"/>
            <blueprint type="short" inlinetype="Short" mode="Acquire"/>
            <blueprint type="char" inlinetype="Char" mode="Acquire"/>
            <blueprint type="long" inlinetype="Long" mode="Acquire"/>
            <blueprint type="float" inlinetype="Float" mode="Acquire" asLong="Float.floatToRawIntBits"/>
            <blueprint type="double" inlinetype="Double" mode="Acquire" asLong="Double.doubleToRawLongBits"/>

            <!-- opaque gets -->
            <blueprint type="Object" inlinetype="Reference" mode="Opaque" asLong="System.identityHashCode"/>
            <blueprint type="int" inlinetype="Int" mode="Opaque"/>
            <blueprint type="boolean" inlinetype="Boolean" mode="Opaque" asLong="boolToLong"/>
            <blueprint type="byte" inlinetype="Byte" mode="Opaque"/>
            <blueprint type="short" inlinetype="Short" mode="Opaque"/>
            <blueprint type="char" inlinetype="Char" mode="Opaque"/>
            <blueprint type="long" inlinetype="Long" mode="Opaque"/>
            <blueprint type="float" inlinetype="Float" mode="Opaque" asLong="Float.floatToRawIntBits"/>
            <blueprint type="double" inlinetype="Double" mode="Opaque" asLong="Double.doubleToRawLongBits"/>
        </unsafegenerate>
    </target>

	<target name="compile-all" description="compile" depends="unsafe-benchmarks">

		<!-- core -->
		<javac srcdir="${src-core}"
             destdir=""
             debug="on"
             source="1.8"
             target="1.8"
             includeantruntime="false"
             excludes="">
		</javac>
		<javac srcdir="${src-core}"
             destdir=""
             debug="on"
             source="1.8"
             target="1.8"
             includeantruntime="false"
             includes="**/ParallelBench.java">
		</javac>

		<!-- collections -->
		<javac srcdir="${src-collections}"
            debug="on"
            destdir=""
            source="1.8"
            target="1.8"
            includeantruntime="false"
            classpath="${src-core}"
        	excludes="**/*ambda*.java">
		</javac>

		<javac srcdir="${src-collections}"
            debug="on"
            destdir=""
            source="1.8"
            target="1.8"
            includeantruntime="false"
            classpath="${src-core}"
            includes="**/*ambda*.java">
		</javac>

		<!-- crypto -->
		<javac srcdir="${src-crypto}"
            debug="on"
            destdir=""
            source="1.8"
            target="1.8"
            includeantruntime="false"
            classpath="${src-core}">
		</javac>

		<!-- examples -->
		<javac srcdir="${src-examples}"
            debug="on"
            destdir=""
            source="1.8"
            target="1.8"
            includeantruntime="false"
            classpath="${src-examples}"
            includes="**/SocketEchoBench.java">
		</javac>
		<javac srcdir="${src-examples}"
             debug="on"
             destdir=""
             source="1.8"
             target="1.8"
             includeantruntime="false"
             classpath="${src-examples}"
             includes="**/*ambda*.java">
		</javac>
		<javac srcdir="${src-examples}"
            debug="on"
            destdir=""
            source="1.8"
            target="1.8"
            includeantruntime="false"
            classpath="${src-examples}"
        	excludes="**/*ambda*.java, **/SocketEchoBench.java">
		</javac>

		<!-- string -->
        <javac srcdir="${src-string}"
            debug="on"
            destdir=""
            encoding="UTF-8"
            source="1.8"
            target="1.8"
            includeantruntime="false"
            classpath="${src-string}">
        </javac>

		<!-- gpu -->
		<javac srcdir="${src-gpu}"
            debug="on"
            destdir=""
            source="1.8"
            target="1.8"
            includeantruntime="false"
            classpath="${src-gpu}">
		</javac>

		<!-- indy -->
		<!--
        <javac srcdir="${src-indy}"
             debug="on"
             destdir=""
             source="1.8"
             target="1.8"
             classpath="${src-indy},${basedir}/asm-all-4.0.jar">
         </javac>
    	-->

		<!-- lambda -->
		<javac srcdir="${src-lambda}"
             debug="on"
             destdir=""
             source="1.8"
             target="1.8"
			 includeantruntime="false">
		</javac>

		<!-- JNI -->
		<javac srcdir="${src-jni}"
             debug="on"
             destdir=""
             source="1.8"
             target="1.8"
			 includeantruntime="false">
		</javac>

		<!-- math -->
		<javac srcdir="${src-math}"
             debug="on"
             destdir=""
             source="1.8"
             target="1.8"
			 includeantruntime="false"
             classpath="${src-math}">
		</javac>

		<!-- humble -->
		<javac srcdir="${src-humble}"
        debug="on"
        destdir=""
        source="1.8"
        target="1.8"
        includeantruntime="false">
		</javac>

		<!-- arraycopy -->
		<javac srcdir="${src-arraycopy}"
        debug="on"
        destdir=""
        source="1.8"
        target="1.8"
        includeantruntime="false">
		</javac>

        <!-- unsafe -->
        <javac srcdir="${src-unsafe}"
        debug="on"
        destdir=""
        source="21"
        target="21"
        includeantruntime="false"
        excludes="generator/**">
            <compilerarg line="--add-exports java.base/jdk.internal.misc=ALL-UNNAMED"/>
        </javac>
	</target>

	<!-- Create BumbleBench.jar and clean up -->
	<target name="dist" depends="compile-all" description="Generate the jar file" >
		<exec executable="bash">
			<arg value="-c" />
			<arg value="rm -f BumbleBench.jar" />
		</exec>

		<jar jarfile="${dist}/BumbleBench.jar" filesonly="true">
			<fileset dir="${basedir}"
             	excludes="**/asm-all-4.0.jar,**/Makefile,**/*.mk, **/build.xml. **/.project">
			</fileset>
			<manifest>
				<attribute name="Main-Class" value="net.adoptopenjdk.bumblebench.core.Launcher"/>
			</manifest>
		</jar>

		<delete>
			<fileset dir="." includes="**/*.class"/>
		</delete>

        <delete>
            <fileset dir="${src-unsafe}" includes="*Bench.java"/>
        </delete>
	</target>
</project>
