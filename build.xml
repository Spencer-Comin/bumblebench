<?xml version="1.0"?>

<!--
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
	    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
This is a build.xml which executes the main openjdk.build build.xml
to allow tools which invoke a root level build.xml file to
execute a build.
-->

<project name="net.adoptopenjdk.bumblebench" default="dist" basedir=".">
	<!--taskdef resource='net/sf/antcontrib/antlib.xml'/-->
	<description>
       Compile net.adoptopenjdk.bumblebench
    </description>

	<property name="dist" value="${basedir}"/>
	<property name="src-core" value="${basedir}/net/adoptopenjdk/bumblebench/core"/>
	<property name="src-collections" value="${basedir}/net/adoptopenjdk/bumblebench/collections"/>
	<property name="src-crypto" value="${basedir}/net/adoptopenjdk/bumblebench/crypto"/>
	<property name="src-examples" value="${basedir}/net/adoptopenjdk/bumblebench/examples"/>
	<property name="src-gpu" value="${basedir}/net/adoptopenjdk/bumblebench/gpu"/>
	<property name="src-humble" value="${basedir}/net/adoptopenjdk/bumblebench/humble"/>
	<property name="src-json" value="${basedir}/net/adoptopenjdk/bumblebench/json"/>
	<property name="src-indy" value="${basedir}/net/adoptopenjdk/bumblebench/indy"/>
	<property name="src-lambda" value="${basedir}/net/adoptopenjdk/bumblebench/lambda"/>
	<property name="src-math" value="${basedir}/net/adoptopenjdk/bumblebench/math"/>
 	<property name="src-string" value="${basedir}/net/adoptopenjdk/bumblebench/string"/>
	<property name="src-jni" value="${basedir}/net/adoptopenjdk/bumblebench/jni"/>
	<property name="src-arraycopy" value="${basedir}/net/adoptopenjdk/bumblebench/arraycopy"/>
    <property name="src-unsafe" value="${basedir}/net/adoptopenjdk/bumblebench/unsafe"/>
    <property name="src-unsafe-generator" value="${src-unsafe}/generator"/>

    <property environment="env"/>
    <condition property="collections?">
        <contains string="${env.BENCHMARKS}" substring="collections" casesensitive="false"/>
    </condition>
    <condition property="crypto?">
        <contains string="${env.BENCHMARKS}" substring="crypto" casesensitive="false"/>
    </condition>
    <condition property="examples?">
        <contains string="${env.BENCHMARKS}" substring="examples" casesensitive="false"/>
    </condition>
    <condition property="string?">
        <contains string="${env.BENCHMARKS}" substring="string" casesensitive="false"/>
    </condition>
    <condition property="gpu?">
        <contains string="${env.BENCHMARKS}" substring="gpu" casesensitive="false"/>
    </condition>
    <condition property="lambda?">
        <contains string="${env.BENCHMARKS}" substring="lambda" casesensitive="false"/>
    </condition>
    <condition property="jni?">
        <contains string="${env.BENCHMARKS}" substring="jni" casesensitive="false"/>
    </condition>
    <condition property="math?">
        <contains string="${env.BENCHMARKS}" substring="math" casesensitive="false"/>
    </condition>
    <condition property="humble?">
        <contains string="${env.BENCHMARKS}" substring="humble" casesensitive="false"/>
    </condition>
    <condition property="arraycopy?">
        <contains string="${env.BENCHMARKS}" substring="arraycopy" casesensitive="false"/>
    </condition>
    <condition property="unsafe?">
        <contains string="${env.BENCHMARKS}" substring="unsafe" casesensitive="false"/>
    </condition>

    <target name="compile-core">
        <javac srcdir="${src-core}"
             destdir=""
             debug="on"
             source="1.8"
             target="1.8"
             includeantruntime="false"
             excludes="">
		</javac>
        <javac srcdir="${src-core}"
             destdir=""
             debug="on"
             source="1.8"
             target="1.8"
             includeantruntime="false"
             includes="**/ParallelBench.java">
		</javac>
    </target>

    <target name="compile-collections" extensionOf="compile-all" if="collections">
        <javac srcdir="${src-collections}"
            debug="on"
            destdir=""
            source="1.8"
            target="1.8"
            includeantruntime="false"
            classpath="${src-core}"
        	excludes="**/*ambda*.java">
		</javac>

		<javac srcdir="${src-collections}"
            debug="on"
            destdir=""
            source="1.8"
            target="1.8"
            includeantruntime="false"
            classpath="${src-core}"
            includes="**/*ambda*.java">
		</javac>
    </target>

    <target name="compile-crypto" extensionOf="compile-all" if="crypto?">
        <javac srcdir="${src-crypto}"
            debug="on"
            destdir=""
            source="1.8"
            target="1.8"
            includeantruntime="false"
            classpath="${src-core}">
		</javac>
    </target>

    <target name="compile-examples" extensionOf="compile-all" if="examples?">
        <javac srcdir="${src-examples}"
            debug="on"
            destdir=""
            source="1.8"
            target="1.8"
            includeantruntime="false"
            classpath="${src-examples}"
            includes="**/SocketEchoBench.java">
		</javac>
		<javac srcdir="${src-examples}"
             debug="on"
             destdir=""
             source="1.8"
             target="1.8"
             includeantruntime="false"
             classpath="${src-examples}"
             includes="**/*ambda*.java">
		</javac>
		<javac srcdir="${src-examples}"
            debug="on"
            destdir=""
            source="1.8"
            target="1.8"
            includeantruntime="false"
            classpath="${src-examples}"
        	excludes="**/*ambda*.java, **/SocketEchoBench.java">
		</javac>
    </target>

    <target name="compile-string" extensionOf="compile-all" if="string?">
        <javac srcdir="${src-string}"
            debug="on"
            destdir=""
            encoding="UTF-8"
            source="1.8"
            target="1.8"
            includeantruntime="false"
            classpath="${src-string}">
        </javac>
    </target>

    <target name="compile-gpu" extensionOf="compile-all" if="gpu?">
        <javac srcdir="${src-gpu}"
            debug="on"
            destdir=""
            source="1.8"
            target="1.8"
            includeantruntime="false"
            classpath="${src-gpu}">
		</javac>
    </target>

    <target name="compile-lambda" extensionOf="compile-all" if="lambda?">
        <javac srcdir="${src-lambda}"
             debug="on"
             destdir=""
             source="1.8"
             target="1.8"
			 includeantruntime="false">
		</javac>
    </target>

    <target name="compile-jni" extensionOf="compile-all" if="jni?">
        <javac srcdir="${src-jni}"
             debug="on"
             destdir=""
             source="1.8"
             target="1.8"
			 includeantruntime="false">
		</javac>
    </target>

    <target name="compile-math" extensionOf="compile-all" if="math?">
        <javac srcdir="${src-math}"
             debug="on"
             destdir=""
             source="1.8"
             target="1.8"
			 includeantruntime="false"
             classpath="${src-math}">
		</javac>
    </target>

    <target name="compile-humble" extensionOf="compile-all" if="humble?">
        <javac srcdir="${src-humble}"
            debug="on"
            destdir=""
            source="1.8"
            target="1.8"
            includeantruntime="false">
		</javac>
    </target>

    <target name="compile-arraycopy" extensionOf="compile-all" if="arraycopy?">
        <javac srcdir="${src-arraycopy}"
            debug="on"
            destdir=""
            source="1.8"
            target="1.8"
            includeantruntime="false">
		</javac>
    </target>

    <import file="${src-unsafe}/generate.xml" as="unsafe"/>
    <target name="compile-unsafe" extensionOf="compile-all" depends="unsafe.benchmarks" if="unsafe?">
        <exec executable="gcc" failonerror="true">
            <arg line="-c -fPIC -I${env.JAVA_HOME}/include -I${env.JAVA_HOME}/include/linux ${src-unsafe}/native.c -o ${src-unsafe}/native.o"/>
        </exec>
        <exec executable="gcc" failonerror="true">
            <arg line="-shared -fPIC -lc ${src-unsafe}/native.o -o ${src-unsafe}/libnative.so"/>
        </exec>
        <delete file="${src-unsafe}/native.o"/>
        <javac srcdir="${src-unsafe}"
            debug="on"
            destdir=""
            source="21"
            target="21"
            includeantruntime="false"
            excludes="generator/**">
            <compilerarg line="--add-exports java.base/jdk.internal.misc=ALL-UNNAMED"/>
        </javac>
    </target>

	<extension-point name="compile-all" description="compile" depends="compile-core"/>

	<!-- Create BumbleBench.jar and clean up -->
	<target name="dist" depends="compile-all" description="Generate the jar file" >
		<exec executable="bash">
			<arg value="-c" />
			<arg value="rm -f BumbleBench.jar" />
		</exec>

		<jar jarfile="${dist}/BumbleBench.jar" filesonly="true">
			<fileset dir="${basedir}"
             	excludes="**/asm-all-4.0.jar,**/Makefile,**/*.mk, **/build.xml. **/.project">
			</fileset>
			<manifest>
				<attribute name="Main-Class" value="net.adoptopenjdk.bumblebench.core.Launcher"/>
			</manifest>
		</jar>

		<delete>
			<fileset dir="." includes="**/*.class"/>
		</delete>

        <delete quiet="true">
            <fileset dir="${src-unsafe}" includes="*Bench.java"/>
        </delete>
        <delete file="${src-unsafe}/libnative.so" quiet="true"/>
	</target>
</project>
